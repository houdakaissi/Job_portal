 
import './Candidate.css';
import Navbar from './Navbar';
import { loginCallback } from './authUtils';
import { useNavigate } from 'react-router-dom';
import { useAuth } from './AuthContext';
 
import 'react-datepicker/dist/react-datepicker.css';
import React, { useEffect, useState } from 'react';
function Candidate() {
  const { username, login } = useAuth();
 

 


  const [isSignUp, setIsSignUp] = useState(false);
  const [isSignIn, setIsSignIn] = useState(true);
  const [userName, setUserName] = useState('');
  const handleLoginInputChange = (e) => {
    const { name, value } = e.target;
    setLoginObj({ ...loginObj, [name]: value });
  };
  const signUpObjInitialState = {
    id: '',
    username: '',
    email: '',
    password: '',
    dob: '',
    sex: '',
    phone: '',
    countryCode: '',
    jobInterest: '',
    educationLevel: '',
    nationality: '',
    languages: [
      { language: 'French', checked: false, level: '' },
      { language: 'English', checked: false, level: '' }
      // Add more languages as needed
    ],
    //fileName: null,
  };

  const loginObjInitialState = {
    email: '',
    password: ''
  };

  const [signUpObj, setSignUpObj] = useState(signUpObjInitialState);
  const [loginObj, setLoginObj] = useState(loginObjInitialState);

  /*const onRegister = () => {
    // Perform registration logic here (e.g., API call)
    alert('Registration Success');
    // Reset the sign-up form fields
    setSignUpObj(signUpObjInitialState);
  };
*/

const onRegister = () => {
    fetch('http://localhost:80/registerCandidate.php', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(signUpObj),
    })
    .then(response => response.json())
    .then(data => {
      alert(data.message); // Show success message from PHP
      // Optionally, you can reset the form fields here
      setSignUpObj(signUpObjInitialState);
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Registration failed');
    });
  };
  /*
  const onLogin = () => {
    // Perform login logic here (e.g., API call)
    alert('Login Success');
    // Reset the login form fields
    setLoginObj(loginObjInitialState);
  };
  */
/*
  
  const onLogin = () => {
    fetch('http://localhost:80/loginCandidate.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            email: loginObj.email,
            password: loginObj.password,
        }),
    })
    .then(response => response.json())
    .then(data => {
        console.log(data); // Handle response from PHP script
    })
    .catch(error => {
        console.error('Error:', error);
    });
};
*/
const navigate=useNavigate();

const onLogin = () => {
    fetch('http://localhost:80/loginCandidate.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            email: loginObj.email,
            password: loginObj.password,
        }),
    })
    .then(response => response.json())
    .then(data => {
        console.log(data); // Handle response from PHP script
        console.log("ID from data:", data.id); // Check if data.id is defined
        localStorage.setItem('id', data.id);
        const k = localStorage.getItem('id');
        console.log("ID from localStorage:", k);
        if (data.success) {
         
console.log("hhhhhhhhhhhhhhhhhi");
            console.log('Logged in asssssssss:', data.username);
            console.log('languages:', data.languages);
            data.languages.forEach(lang => {
              console.log(`Language: ${lang.language}, Level: ${lang.level}`);
            });
            login(data.username); 
            
 
  
            localStorage.setItem('username', data.username);
           // localStorage.setItem('email', data.email);
            localStorage.setItem('password', data.password);
           
            localStorage.setItem('dob', data.dob);
            localStorage.setItem('sex', data.sex);
            localStorage.setItem('phone', data.phone);
            localStorage.setItem('countryCode', data.countryCode);
            localStorage.setItem('jobInterest', data.jobInterest);
            localStorage.setItem('educationLevel', data.educationLevel);
            localStorage.setItem('nationality', data.nationality);
            


          //  localStorage.setItem('languages', data.languages);
        //  const languagesString = JSON.stringify(data.languages);
    //  localStorage.setItem('languages', data.languages);
    // Assuming data.languages is an array like this:
const languages = [
  { language: 'French', level: 'Basic' },
  { language: 'English', level: '' }
];

// Convert array to JSON string and store in localStorage
localStorage.setItem('languagess', JSON.stringify(languages));
 

          //  localStorage.setItem('cvFile', data.cvFile);

          //  const jsonData = JSON.stringify(signUpObjInitialState);
//localStorage.setItem('signUpObjInitialState', jsonData);
const storedLanguagesString = localStorage.getItem('languages');
//const storedLanguages = storedLanguagesString ? JSON.parse(storedLanguagesString) : [];

console.log('Stored Languages:', storedLanguagesString);
const storede = localStorage.getItem('sex');
console.log('Storddddddded Data:', storede);
// Retrieve data from localStorage
const storedLanguages = localStorage.getItem('languages');

let languagess = [];

try {
    // Parse JSON string back to JavaScript array of objects
    languagess = JSON.parse(storedLanguages) || [];
} catch (error) {
    console.error('Error parsing languages from localStorage:', error);
}

// Ensure languages is an array before iterating
if (Array.isArray(languagess)) {
    // Iterate over languages array
    languagess.forEach(lang => {
        console.log(`Language: ${lang.language}, Level: ${lang.level}`);
    });
} else {
    console.error('Invalid data retrieved from localStorage:', storedLanguages);
}



  
            // Parse JSON string to JavaScript object
      
             // Store username in localStorage
            loginCallback(data.username); 
          //  handleLoginSuccess(data.username);
            // Redirect to /home if login is successful
            navigate("/home");
           // window.location.href = data.redirect || '/home';
        } else {
            // Handle unsuccessful login (show error message, etc.)
            console.error('Login failed:', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
};

useEffect(() => {
  // Retrieve data from localStorage
  const storedData = localStorage.getItem('signUpObjInitialState');

  // Parse JSON string to JavaScript object
  if (storedData) {
    const parsedData = JSON.parse(storedData);
    
    // Access the username property
    console.log('Usernameeeeee:', parsedData.username);
  }
}, []);





  const toggleForm = () => {
    setIsSignUp(false); // Show sign-in form
    setIsSignIn(true); // Hide sign-up form
  };

  const toggleForm1 = () => {
    setIsSignUp(true); // Show sign-up form
    setIsSignIn(false); // Hide sign-in form
  };
  /*

  const handleLanguageChange = (language) => (e) => {
    const updatedLanguages = signUpObj.languages.map((lang) =>
      lang.language === language ? { ...lang, level: e.target.value } : lang
    );
    setSignUpObj({ ...signUpObj, languages: updatedLanguages });
  };
*/
  const handleFileChange = (e) => {
    setSignUpObj({ ...signUpObj, fileName: e.target.files[0] });
  };
  
  const handleLanguageChange = (language) => (event) => {
    const target = event.target;
    const value = target.type === 'checkbox' ? target.checked : target.value;
    const updatedLanguages = signUpObj.languages.map((lang) =>
      lang.language === language
        ? { ...lang, checked: target.type === 'checkbox' ? value : lang.checked, level: target.type === 'checkbox' ? lang.level : value }
        : lang
    );
    setSignUpObj({ ...signUpObj, languages: updatedLanguages });
  };

  const handleDateOfBirthChange = (date) => {
    setSignUpObj({ ...signUpObj, dob: date });
  };
  const getCurrentDate = () => {
    const today = new Date();
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const day = today.getDate().toString().padStart(2, '0');
    const year = today.getFullYear();
    return `${year}-${month}-${day}`;
  };

  return (
   
    <div className="parent">
      <div className={`container ${isSignUp ? 'active' : ''}`} id="container">
 
                {/* Rest of your form and toggle logic */}
              
        <div className={`form-container sign-up ${isSignUp ? 'active' : ''}`}>
          <form>
            <h1>CÃ©er un compte</h1>
            <span>Utilisez votre adresse e-mail pour l'inscription</span>
            <input
              type="text"
              name="username"
              value={signUpObj.username}
              onChange={(e) => setSignUpObj({ ...signUpObj, username: e.target.value })}
              placeholder="Username"
            />
            <input
              type="email"
              name="email"
              value={signUpObj.email}
              onChange={(e) => setSignUpObj({ ...signUpObj, email: e.target.value })}
              placeholder="Email"
            />
            <input
              type="password"
              name="password"
              value={signUpObj.password}
              onChange={(e) => setSignUpObj({ ...signUpObj, password: e.target.value })}
              placeholder="Password"
            />
            <input
              type="text"
              name="dob"
              
            //  value={signUpObj.dob}
             // onChange={handleDateOfBirthChange}
              onChange={(e) => setSignUpObj({ ...signUpObj, dob: e.target.value })}
              placeholder=" (DD/MM/YYYY)"
            />
            <input
              type="text"
              name="sex"
              value={signUpObj.sex}
              onChange={(e) => setSignUpObj({ ...signUpObj, sex: e.target.value })}
              placeholder="Sex"
            />
            <div className="phone-input">
              <input
                type="text"
                name="phone"
                value={signUpObj.phone}
                onChange={(e) => setSignUpObj({ ...signUpObj, phone: e.target.value })}
                placeholder="Phone Number"
              />
              <input
                type="text"
                name="countryCode"
                value={signUpObj.countryCode}
                onChange={(e) => setSignUpObj({ ...signUpObj, countryCode: e.target.value })}
                placeholder="Country Code"
              />
            </div>
            <input
              type="text"
              name="jobInterest"
              value={signUpObj.jobInterest}
              onChange={(e) => setSignUpObj({ ...signUpObj, jobInterest: e.target.value })}
              placeholder="Job Interest"
            />
            <select
              name="educationLevel"
              value={signUpObj.educationLevel}
              onChange={(e) => setSignUpObj({ ...signUpObj, educationLevel: e.target.value })}
            >
              <option value="">Select Education Level</option>
              <option value="High School">High School</option>
              <option value="Bachelor's Degree">Bachelor's Degree</option>
              <option value="Master's Degree">Master's Degree</option>
              <option value="PhD">PhD</option>
            </select>
            <input
              type="text"
              name="nationality"
              value={signUpObj.nationality}
              onChange={(e) => setSignUpObj({ ...signUpObj, nationality: e.target.value })}
              placeholder="Nationality"
            />
            <div className="language-section">
              <span>Languages:</span>
              {signUpObj.languages.map((lang) => (
                <div key={lang.language}>
                  <label>
                    <input
                      type="checkbox"
                      name="languages"
                      //
                      checked={lang.checked}
                    //  value={lang.language}
                      //checked={signUpObj.languages.some((l) => l.language === lang.language)}
                      onChange={handleLanguageChange(lang.language)}
                    />{' '}
                    {lang.language}
                  </label>
                  <select
                    value={lang.level}
                    onChange={handleLanguageChange(lang.language)}
                    disabled={!lang.checked}
                  >
                    <option value="">Select proficiency level</option>
                    <option value="Basic">Basic</option>
                    <option value="Intermediate">Intermediate</option>
                    <option value="Advanced">Advanced</option>
                    <option value="Native">Native</option>
                  </select>
                </div>
              ))}
            </div>
            <input type="file" onChange={handleFileChange} />

            <button type="button" onClick={onRegister}>
              S'inscrire
            </button>
          </form>
        </div>
        <div className={`form-container sign-in ${isSignIn ? 'active' : ''}`}>
      
        <form>
            <h1>Connexion</h1>
            <input
              type="email"
              name="email"
              value={loginObj.email}
              onChange={handleLoginInputChange}
              placeholder="Email"
            />
            <input
              type="password"
              name="password"
              value={loginObj.password}
              onChange={handleLoginInputChange}
              placeholder="Password"
            />
            <button type="button" onClick={onLogin}>
              Se connecter
            </button>
        </form>
        </div>
        <div className="toggle-container">
          <div className="toggle">
            <div className={`toggle-panel toggle-left ${isSignIn ? 'active' : ''}`}>
              <h1>Bienvenue!</h1>
              <p>Entrez vos coordonnÃ©es personnelles pour utiliser toutes les fonctionnalitÃ©s du site</p>
              <button type="button" className="hidden" id="login" onClick={toggleForm}>
                Se connecter
              </button>
            </div>
            <div className={`toggle-panel toggle-right ${isSignUp ? 'active' : ''}`}>
              <h1>Bonjour!</h1>
              <p>Inscrivez-vous avec vos coordonnÃ©es personnelles pour utiliser toutes les fonctionnalitÃ©s du site</p>
              <button type="button" className="hidden" id="register" onClick={toggleForm1}>
                S'inscrire
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Candidate;
